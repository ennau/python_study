### ReprMixin
class Table(object):
    def __init__(self, l, w, h):
        self.l, self.w, self.h = l, w, h


class ReprMixin(object):
    def __repr__(self):
        return "{}({})".format(
        self.__class__.__name__,
        ', '.join(["{}={}".format(k, v) for k, v in self.__dict__.items()])
        )


class TableWithBox(ReprMixin, Table):
    def __init__(self, *args, **kwargs):
        super(TableWithBox, self).__init__(*args, **kwargs)
        self.box_is_opened = False


### Read only variable in class
class A(object):
    def __init__(self):
        self.a = 42
    def __setattr__(self, name, value):
        if hasattr(self, 'a') and name == 'a':
            raise AttributeError('a is read-only')
        super(A, self).__setattr__(name, value)
    def __delattr__(self, name):
        if name == 'a':
            raise AttributeError('a is read-only')
        super(A, self).__delattr__(name)

### Pattern Proxy
class A(object):
    def m1(self):
        print "A.m1"
    def m2(self):
        print "A.m2"
    def m3(self):
        print "A.m3"

class Proxy(object):
    def __init__(self):
        self._a = A()
    def m1(self):
        print "Proxy.m1"
    def __getattr__(self, item):
        return getattr(self._a, item)

### equil magic method
class Person(object):
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def __repr__(self):
        return "Person {}: {}".format(self.name, self.age)
    def __eq__(self, other):
        return self.name == other.name and self.age == other.age
    # Sort list via age (method lt)
    def __lt__(self, other):
        return self.age < other.age


